1. web-inf目录是仅服务器可见的目录，下面有web.xml配置文件 classes文件夹 和 lib类库文件夹
2. web项目的虚拟路径和服务器端口号可以修改 ，在conf/server.xml中修改端口
3. jsp三大指令：page include  taglib  ; 在文件头部，语法是：<%@   ......    %>
4. HTML注释：<!-- --> , 在客户端可见，jsp注释 ：<%--  --%>，在客户端不可见 可以内嵌Java注释
5. jsp脚本：在<%
                            %>之中；
   而jsp声明： <%!
		        %>;在其中声明变量等；
   jsp表达式：<%=表达式 %>  注意：其中表达式不以分号结束·，可以用来调用变量或者函数；


6. 客户端的请求信息被封装在request对象中  它是HttpServletRequest类的实例 。 request对象具有请求域。常用方法如下：
  		1. String getParameter(String name ) 返回name指定参数的参数值
		2. String[ ] getParameterValues (String name )返回包含参数name的所有值的数组
		3. void setAttribute(String , Object ) 返回此请求中的属性    //  键值对形式
		4. Object getAttribute(String name )   //  name是键，此方法返回对应的值
		.......
		详见 ：http://www.runoob.com/jsp/jsp-client-request.html

7. ☆☆☆☆  请求重定向与请求转发的区别：
	请求重定向 ：相当于两次请求，是客户端的行为，前一次的请求对象不会保存，地址栏URL会改变  response.sendRedirect( );
	请求转发： 一次请求 ，是服务器端的行为,转发后请求对象会保存，地址栏URL不会改变，request.getRequestDispatcher( ).forward(req,resp);

8. jsp九大内置对象：out   request   response  session  application 和  Page   pageContext   exception  config

9.  session :  是HttpSession的实例。session对象用来跟踪在各个客户端请求间的会话
		1. long getCreationTime( )  ;// 返回session创建的时间  单位ms
		2. public String getId( ) ;  //  返回session创建时jsp引擎为它设置的唯一ID号
		3. public Object serAttribute(String name,Object value)  ; // 使用指定名称讲对象绑定到此会话。 键值对
		4. public Object getAttribute(String name);  //   返回此会话中与指定名称绑定到一起的对象 没有则返回null
		5. public Enumeration getAttributeNames( );
		6. int getMaxInactiveInternal( ) ; //  返回两次请求相隔多久此session会被取消  （单位：秒）

	session 的生命周期：
	    1. 当客户端第一次访问某个jsp或者servlet时候，服务器会为当前会话创建一个SessionId，
	        每次客户端向服务器发送请求时，都会将此SessionId携带过去，服务端会对此SessionId进行校验。
        2. 某次会话当中通过超链接打开的新页面属于同一次会话；只要当前会话页面没有全部关闭，重新打开的浏览器窗口访问同一个项目资源时属于同一次会话；
            除非本次会话的所有页面都关闭后在重新访问某个JSP或者servlet将会创建新的会话
            （原有会话还存在，只是这个旧的Session仍然存在于服务端，只不过再也没有客户端会携带它然后交予服务端校验）
        3. 服务器会把长时间没有活动的Session从服务器内存中清除，此时Session便失效。


10.  application 对象 ：
		   实现了用户间数据的共享 ，可以存放全局变量
		  开始于服务器启动，终止于服务器的关闭
		  在用户的前后连接或者不同用户之间的连接中，可以对application对象的同一属性进行操作。
   		  在任何地方对application对象属性的操作，都会影响到其他用户对此的访问
		  是ServletContext类的实例

			public void setAttribute(String name , Object value)   ;// 使用指定名称将对象绑定到此会话。
			public Object getAttribute( String name)
			Enumeration getAttributeNames ( )  ; // 返回所有可用属性名的枚举
			String getServerInfo( )  ;  //  返回jsp（servlet）引擎名 及 版本号


11.pageContext 对象
	pageContext对象是javax.servlet.jsp.PageContext 类的实例，用来代表整个JSP页面。
	这个对象主要用来访问页面信息，同时过滤掉大部分实现细节。
	这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象可以通过访问这个对象的属性来导出。
	pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL,页面scope等。
	PageContext类定义了一些字段，包括PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。
	它也提供了40余种方法，有一半继承自javax.servlet.jsp.JspContext 类。
	其中一个重要的方法就是removeAttribute()，它可接受一个或两个参数。
	比如，pageContext.removeAttribute("attrName")移除四个scope中相关属性，但是下面这种方法只移除特定scope中的相关属性：
	pageContext.removeAttribute("attrName", PAGE_SCOPE);

		一些方法：
			1.  JspWriter getOut( );
			2.  HttpSession getSession( );
			3.  Object getPage( );
			4.  ServletRequest getRequest( );
			5.  ServletResponse getResponse( );
			6.  void forward(String relativeUrlPath) ; //  使当前页面重导到另一页面
			7.  void include (String relativeUrlPath);  //  在当前位置包含另一个页面（文件）

12. JavaBean
		JavaBean是特殊的Java类，使用Java语言书写，并且遵守JavaBean API规范。

		接下来给出的是JavaBean与其它Java类相比而言独一无二的特征：
			提供一个默认的无参构造函数。
			需要被序列化并且实现了Serializable接口。
			可能有一系列可读写属性。
			可能有一系列的"getter"或"setter"方法。
	在jsp页面中通常使用jsp动作标签使用javabean
		1 useBeans
		2 setProperty
		3 getProperty   3种动作

	<jsp:useBeans>  在jsp页面中实例化或者在指定范围内使用javabean;
		语法：<jsp:useBean id="标示符" class="java类名"  scope="作用范围" />
	<jsp:setProperty>  给已经实例化的JavaBean对象的属性赋值  有四种形式
		1 <jsp:setProperty name="JavaBean实例名 " property= " *"  / > （跟表单关联）
		2 <jsp:setProperty name="JavaBean实例名 " property= "JavaBean属性名"  / > （跟表单关联）
			                    //  与上面不同的是 ，这个只部分匹配 过滤器就是property设置的值
		3 <jsp:setProperty name="JavaBean实例名 " property= " JavaBean属性名"  value= "BeanValue"  / > （手工设置）
								// 可以使用request.getParameter() 不过无意义
        4 <jsp:setProperty name="JavaBean实例名 " property= "propertyName"  param="request对象中的参数名" / > （跟reques参数关联）
							    // 实际上是根据url传参数给属性赋值

	 <jsp:getProperty> 获取指定javaBean对象的属性值
		语法：<jsp:getProperty name="JavaBean实例名" property=“属性名”/>

13. JavaBean 的四个作用域范围 ： 使用useBeans的Scope属性可以用来指定javabean的作用范围
	page： //  仅在当前页面有效
	request :    //  可以通过HttpRequest.getAttribute( )  方法取得JavaBean对象
	session :     //   可以通过HttpSession.getAttribute( ) 方法取得JavaBean对象
	application :  //  可以通过application.getAtribute( ) 方法取得JavaBean对象/


14  Cookie   :  是web服务器保存在客户端的一系列文本信息  。
	Cookie的作用 ： 1. 对特定对象的追踪     		2.保存用户浏览网页记录与习惯    	3. 简化登录
		安全风险： 容易泄露用户信息 。
	Jsp中创建并使用Cookie :
			     1. 创建Cookie对象  	Cookie newCookie = new Cookie (String key, Object value );
			     2.  写入Cookie对象 	response.addCookie(newCookie);
		 	     3.  读取Cookie对象   	Cookies[ ]  cookies = request.getCookies( );

	Cookie的一些常用方法：
			1.  public void setMaxAge(int expiry)  ;  //  设置Cookie的有效期 以秒为单位
			2.  public void setValue(String newValue) ;  //  在Cookie创建后 对Cookie进行赋值
			3.  String getName( ) ;              	 //  	获取 Cookie的名称
			4.  String getValue( );     	// 	获取Cookie的值
			5.  int getMaxAge( );              //          获取Cookie的有效时间，以秒为单位 .

15. session 与 Cookie 的差异
            session                      -       Cookie
        在服务器端保存用户信息            -     在客户端保存用户信息
        保存的是Object类型                -     保存的是String类型
        随会话的结束而将其存储的数据销毁   -   可以长期保存在客户端
        保存比较重要的客户端              -   保存不总要的用户信息

16.  include指令
        语法：<%@ include file="URL" %>

     inlcude动作
        动作标签：<jsp:include page="URL" flush="true|false" />
        其中：page表示要包含的页面  flush指明被包含的页面是否从缓冲区读取(默认是false)。

☆☆☆☆ include指令与include动作的区别：
                                include指令                                   jsp:include动作
       语法格式：            <%@ include file="URL".. %>           |     <jsp:include page="URL" ..  />
       发生作用的时间         页面转换期间                          |      请求期间
       包含的内容            文件的实际内容(源码)                   |      页面的输出
       转换成的Servlet       主页面与包含页面转换为一个Servlet       |      主页面和包含页面转换为独立的Servlet
       编译时间              较慢———资源必须被解析                  |       比较快
       执行时间                 稍快                               |       较慢，资源每次必须被解析

        ***  页面内容经常变化时 更适合使用 <jsp:include> 动作

17. forward 动作
        语法: <jsp:forward page="URL" />
            等同于 request.getRequestDispatcher("/url").forward(request,response); 转发

18. param动作
        语法：<jsp:param name="参数名" value="参数值" />
        常与<jsp:forward>一起使用，作为其子标签。
            例：<jsp:forward page="..." >
                        <jsp:param name="email" value="xionger0127@protonmail.com" >
                </jsp:forward>

19.

